version: '3.8'
services:
  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../certs:/etc/nginx/certs
    depends_on:
      - client
      - server
      - webhooks
      - processor
      - sweeper
    networks:
      - frontend-net
      - backend-net
      - db-net
      - message-net
  kafka:
    container_name: kafka
    image: apache/kafka-native
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - message-net

  postgres:
    container_name: postgres
    image: postgres
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - db-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U",  "${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}

  client:
    container_name: client
    build:
      context: ..
      dockerfile: docker/client.Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - path: ../apps/client/.env
        required: true
    networks:
      - frontend-net
    depends_on:
      - server

  server:
    container_name: server
    build:
      context: ..
      dockerfile: docker/server.Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ../apps/server:/app/apps/server
      - ../packages:/app/packages
      - /app/apps/server/node_modules
      - /app/packages/*/node_modules
    restart: always
    depends_on:
      - postgres
      - kafka
    env_file:
      - path: ../apps/server/.env
        required: true
    networks:
      - db-net
      - backend-net
      - frontend-net
      - message-net

  webhooks:
    container_name: webhooks
    build:
      context: ..
      dockerfile: docker/hooks.Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ../apps/hooks:/app/apps/hooks
      - ../packages:/app/packages
      - /app/apps/hooks/node_modules
      - /app/packages/*/node_modules
    env_file:
      - path: ../apps/hooks/.env
        required: true
    networks:
      - db-net
    depends_on:
      postgres:
        condition: service_healthy

  processor:
    container_name: processor
    build:
      context: ..
      dockerfile: docker/processor.Dockerfile
    volumes:
      - ../apps/processor:/app/apps/processor
      - ../packages:/app/packages
      - /app/apps/processor/node_modules
      - /app/packages/*/node_modules
    depends_on:
      - kafka
      - postgres
    env_file:
      - path: ../apps/processor/.env
        required: true
    networks:
      - message-net
      - db-net

  sweeper:
    container_name: sweeper
    build:
      context: ..
      dockerfile: docker/sweeper.Dockerfile
    volumes:
      - ../apps/sweeper:/app/apps/sweeper
      - ../packages:/app/packages
      - /app/apps/sweeper/node_modules
      - /app/packages/*/node_modules
    depends_on:
      - kafka
      - postgres
    env_file:
      - path: ../apps/sweeper/.env
        required: true
    networks:
      - message-net
      - db-net

networks:
  message-net:
  db-net:
  frontend-net:
  backend-net:

volumes:
  postgres_data:
  kafka_data: