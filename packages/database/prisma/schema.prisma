generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String?
  name          String
  image         String?
  zaps          Zap[]
  token         Token[]
  OAuth         OAuthAccount[]
  slack         Slack[]
  emailVerified Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([id, email])
}

model OAuthAccount {
  id             String   @id @default(cuid())
  userId         String
  provider       String
  providerUserId String
  refreshToken   String?
  accessToken    String?
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([provider, providerUserId])
}

model Token {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  type      TokenType
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Slack {
  id             String         @id @default(cuid())
  userId         String         @unique
  user           User           @relation(fields: [userId], references: [id])
  workspaceId    String         @unique
  workspaceToken String
  channels       SlackChannel[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([userId, workspaceId])
  @@index([workspaceId])
}

model SlackChannel {
  id        String  @id @default(cuid())
  slackId   String
  slack     Slack   @relation(fields: [slackId], references: [id])
  name      String
  channelId String  @unique
  isPrivate Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slackId, channelId])
  @@index([channelId])
}

enum TokenType {
  REFRESH
  ACCESS
  RESET
  VERIFY_EMAIL
}

model Zap {
  id        String   @id @default(cuid())
  trigger   Trigger?
  actions   Action[]
  zapRun    ZapRun[]
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model Trigger {
  id            String       @id @default(cuid())
  zapId         String       @unique
  zap           Zap          @relation(fields: [zapId], references: [id])
  triggerTypeId String
  triggerType   TriggerTypes @relation(fields: [triggerTypeId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([zapId])
}

model TriggerTypes {
  id        String    @id @default(cuid())
  name      String
  trigger   Trigger[]
  image     String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Action {
  id           String      @id @default(cuid())
  zapId        String
  zap          Zap         @relation(fields: [zapId], references: [id])
  actionTypeId String
  actionType   ActionTypes @relation(fields: [actionTypeId], references: [id])
  sortingOrder Int         @default(0)
  metadata     Json        @default("{}")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([zapId])
}

model ActionTypes {
  id        String   @id @default(cuid())
  name      String
  action    Action[]
  image     String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ZapRun {
  id           String        @id @default(cuid())
  zapId        String
  zap          Zap           @relation(fields: [zapId], references: [id])
  metadata     Json
  zapRunOutBox ZapRunOutBox?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model ZapRunOutBox {
  id        String   @id @default(cuid())
  zapRunId  String   @unique
  zapRun    ZapRun   @relation(fields: [zapRunId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
